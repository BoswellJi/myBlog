import{_ as e,c as m,e as s,o as t}from"./app-XEG1kVcG.js";const n={};function i(l,a){return t(),m("div",null,a[0]||(a[0]=[s('<h2 id="解耦应用程序的重要性" tabindex="-1"><a class="header-anchor" href="#解耦应用程序的重要性"><span>解耦应用程序的重要性</span></a></h2><p>在可伸缩的js的世界，当我们说一个应用程序是模块化的，通常我们的意思是它是由高解耦的模块集合组成，功能的不同部分存储在模块中。松耦合通过删除其中可能的依赖使得的应用程序更容易维护。当这个被高效实现时，理解如何改变一个可能影响另一个的系统部分会非常容易。</p><p>但是不像一些传统的变成语言，当前js没有为开发者提供一种干净，有组织的方式导入此类代码模块的方法。这是规范的问题之一，知道最近几年，对更有组织的js应用程序的需求变得更明显，规范才需要深入思考。</p><p>相反地，现在开发者留下模块模式或者对象字面量模式的变种来回退，我们在这本书的更早其谈到这个。其中的许多模块脚本在dom中被串在一起，名称空间由单个全局对象描述，在我们的体系结构中，荣然可能会发生命名冲突。没有手动工作或第三方工具，也没有干净的方法来处理依赖关系。</p><p>虽然这些问题的原生解决方案会在es harmony中来到（可能称为js的下个版本），好消息是，早先从来没有编写模块化js，但是今天，我们可以开始使用它了。</p><p>在这章中，我们打算看看编写模块化js的三种格式，AMD,CommonJS,和js的下个版本的提案Harmony。</p><h2 id="关于脚本加载器的说明" tabindex="-1"><a class="header-anchor" href="#关于脚本加载器的说明"><span>关于脚本加载器的说明</span></a></h2><p>在讨论amd和commonjs的模块的时候，很难不去讨论房间里的大象-脚本加载器。在编写这本书的时候，脚本加载是实现目标的一种手段，目标是称为当今能够在应用程序中使用的模块化js。为此，不幸的是必须使用兼容的脚本加载器。这样才能从这章中获得最大的收获。我推荐对流行的脚本加载器如何工作先有个基本理解，这样模块格式的解释在上下文中才是有意义的。</p>',8)]))}const r=e(n,[["render",i],["__file","1amd.html.vue"]]),c=JSON.parse('{"path":"/books/javascript/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10%E7%8E%B0%E4%BB%A3%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1amd.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"解耦应用程序的重要性","slug":"解耦应用程序的重要性","link":"#解耦应用程序的重要性","children":[]},{"level":2,"title":"关于脚本加载器的说明","slug":"关于脚本加载器的说明","link":"#关于脚本加载器的说明","children":[]}],"git":{"updatedTime":1735558340000,"contributors":[{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":3,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/Boswell"},{"name":"Boswell","username":"Boswell","email":"aiyoudqrjmz@163.com","commits":2,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"mingzhuang.ji","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/mingzhuang.ji"}]},"filePathRelative":"books/javascript/javascript设计模式/10现代模块化的js设计模式/1amd.md"}');export{r as comp,c as data};
