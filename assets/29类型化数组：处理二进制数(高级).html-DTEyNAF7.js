import{_ as e,c as i,e as a,o as t}from"./app-XEG1kVcG.js";const l={};function s(o,m){return t(),i("div",null,m[0]||(m[0]=[a("<ol><li>api基础</li></ol><p>web上更多数据是文本：JSON 文件，HTML 文件，css 文件，js 代码，等等。js通过内置的字符串很好的处理这些的数据。</p><p>但是，2011年之前，它不能很好的处理二进制数据。类型化数组规格1.0在2011.2.8被引入并且提供了处理二进制数据的工具。随着es6的到来，类型化数组被添加到核心语言中以及增加之前只能在正常数组中获取的方法。（map,filter等等）。</p><p>1.1 类型化数组的使用案例</p><p>类型化数组的主要使用案例，是：</p><ul><li>处理二进制数据：管理图片数据，维护二进制文件，处理二进制网络协议，等等</li><li>和原生api交互：原生api通常接受和返回二进制格式数据，你不能够在es6之前的js中存储或者维护的很好二进制数据。意味着，只要你使用这样的api交流，每次调用都必须将数据从js转换到二进制再转换回来。类型化数组消除了这个瓶颈。使用原生api交流的一个例子是webgl，类型化数组被初始化创建。</li></ul><p>1.2 核心类：ArrayBuffer,类型化数组，DataView</p><p>类型化数组api在ArrayBuffer实例中存储二进制数据。</p><p>想要访问ArrayBuffer中的数据，必须将它包裹在视图对象中。</p><ul><li><p>类型化数组</p></li><li><p>数据视图</p></li></ul>",10)]))}const p=e(l,[["render",s],["__file","29类型化数组：处理二进制数(高级).html.vue"]]),n=JSON.parse('{"path":"/books/javascript/%E7%BB%99%E4%B8%8D%E8%80%90%E7%83%A6%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84javascript/7%E9%9B%86%E5%90%88/29%E7%B1%BB%E5%9E%8B%E5%8C%96%E6%95%B0%E7%BB%84%EF%BC%9A%E5%A4%84%E7%90%86%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0(%E9%AB%98%E7%BA%A7).html","title":"","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1735558340000,"contributors":[{"name":"j哥哥","username":"j哥哥","email":"aiyoudqrjmz@163.com","commits":1,"url":"https://github.com/j哥哥"},{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":12,"url":"https://github.com/jmz"},{"name":"jmz","username":"jmz","email":"aiyoudqrjmz@163.com","commits":3,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/Boswell"},{"name":"Boswell","username":"Boswell","email":"aiyoudqrjmz@163.com","commits":2,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"mingzhuang.ji","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/mingzhuang.ji"}]},"filePathRelative":"books/javascript/给不耐烦的程序员的javascript/7集合/29类型化数组：处理二进制数(高级).md"}');export{p as comp,n as data};
