import{_ as i,c as e,e as a,o as s}from"./app-XEG1kVcG.js";const t={};function n(p,l){return s(),e("div",null,l[0]||(l[0]=[a('<h2 id="封装" tabindex="-1"><a class="header-anchor" href="#封装"><span>封装</span></a></h2><ul><li><p>js只能依赖变量作用域来实现封装特性，只能实现public, private;</p></li><li><p>依赖于代码 <code>运行期间</code> 的 <code>可见性</code> 的效果;</p></li></ul><h2 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h2><ul><li><p>多态性表达为两个方面： 类型的模糊和类型的确认（或者识别；</p></li><li><p>js中的类型模糊：通过typeof，检查的变量，只有object, 和基本类型；</p></li><li><p>js中的类型识别：通过instanceof, 对于object类型来进行区分；</p></li></ul><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h2><ul><li><p>properties, methods, events作为对象系统的完整的外在表现来讨论；</p></li><li><p>同时，接口系统也表达为pme这三个方面；</p></li><li><p>大部分高级语言自身没有，事件系统；而是应用框架在使用对象系统时，实现的一个额外的机制；</p></li><li><p>事件的本质： 在确定的时候发生的，可由用户代码响应的行为而已；</p></li></ul><h2 id="类抄写-或原型继承" tabindex="-1"><a class="header-anchor" href="#类抄写-或原型继承"><span>类抄写？或原型继承？</span></a></h2><ul><li><p>构造对象系统的5种方法：</p><ul><li>在构造器中，写 <code>this</code></li><li>在构造器中，直接返回对象实例</li><li>修改原型</li><li>重写原型</li><li>继承原型</li></ul></li><li><p>类抄写</p><ul><li>使用call，apply方法替换函数的上下文对象，抄写类的成员；</li></ul></li><li><p>原型继承</p></li></ul><h2 id="js中的对象-构造器" tabindex="-1"><a class="header-anchor" href="#js中的对象-构造器"><span>js中的对象（构造器</span></a></h2><ul><li><p>内置对象和原生对象区别？</p><ul><li>前者总是在引擎初始化阶段被创建好的对象，是后者的子集，后者包括一些在运行过程中动态创建的对象；</li></ul></li><li><p>内置对象中，只有Error, Data没有直接量语法，只以构造器的形式存在；Math是对象，不是构造器；</p></li><li><p>原生对象</p><ul><li>引擎在执行代码过程中，动态创建的对象： <ul><li>调用函数时的，arguments</li></ul></li></ul></li><li><p>引擎拓展对象</p></li><li><p>宿主对象，不是引擎的原生对象，而是宿主框架通过机制，注册到js引擎中的对象；</p><ul><li>访问Global对象，需要通过宿主对象获取；</li></ul></li></ul><h2 id="不能通过继承得到的效果" tabindex="-1"><a class="header-anchor" href="#不能通过继承得到的效果"><span>不能通过继承得到的效果</span></a></h2>',11)]))}const c=i(t,[["render",n],["__file","3.4javascript的对象系统.html.vue"]]),o=JSON.parse('{"path":"/books/javascript/javascript%E8%AF%AD%E8%A8%80%E7%B2%BE%E9%AB%93%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%AE%9E%E8%B7%B5/3.javascript%E7%9A%84%E9%9D%9E%E5%87%BD%E6%95%B0%E5%BC%8F%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/3.4javascript%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%B3%BB%E7%BB%9F.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"封装","slug":"封装","link":"#封装","children":[]},{"level":2,"title":"多态","slug":"多态","link":"#多态","children":[]},{"level":2,"title":"事件","slug":"事件","link":"#事件","children":[]},{"level":2,"title":"类抄写？或原型继承？","slug":"类抄写-或原型继承","link":"#类抄写-或原型继承","children":[]},{"level":2,"title":"js中的对象（构造器","slug":"js中的对象-构造器","link":"#js中的对象-构造器","children":[]},{"level":2,"title":"不能通过继承得到的效果","slug":"不能通过继承得到的效果","link":"#不能通过继承得到的效果","children":[]}],"git":{"updatedTime":1735558340000,"contributors":[{"name":"j哥哥","username":"j哥哥","email":"aiyoudqrjmz@163.com","commits":1,"url":"https://github.com/j哥哥"},{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":10,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/Boswell"},{"name":"Boswell","username":"Boswell","email":"aiyoudqrjmz@163.com","commits":2,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"mingzhuang.ji","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/mingzhuang.ji"}]},"filePathRelative":"books/javascript/javascript语言精髓与编程语言实践/3.javascript的非函数式语言特性/3.4javascript的对象系统.md"}');export{c as comp,o as data};
