import{_ as l,c as s,e,o as i}from"./app-XEG1kVcG.js";const n={};function t(r,a){return i(),s("div",null,a[0]||(a[0]=[e(`<h2 id="语法概述" tabindex="-1"><a class="header-anchor" href="#语法概述"><span>语法概述</span></a></h2><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h2><h2 id="表达式vs语句" tabindex="-1"><a class="header-anchor" href="#表达式vs语句"><span>表达式vs语句</span></a></h2><p>这章了解js中一个重要的语法差别：表达式和语句之间的不同。</p><ul><li>表达式</li></ul><p>表达式生成一个值并且无论值在哪里被接收都能够被写入。例子，作为一个函数调用的参数或者在赋值的右侧。下面的每一行包含一个表达式：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">myvar</span>
<span class="line"><span class="token number">3</span> <span class="token operator">+</span> x</span>
<span class="line"><span class="token function">myfunc</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>语句</li></ul><p>粗略地，语句执行一个行为，循环和条件语句是语句的案例。一个程序的基础是语句序列。</p><p>无论js哪里接收一个语句，你就能写入一个表达式。这样的一个语句被称为表达式语句。颠倒不能成立，你不能写一个语句在js接收表达式的地方。例如，条件语句不能变成函数的参数。</p><ol><li>条件语句vs条件表达式</li><li>使用不明确的表达式作为语句</li><li>通过eval()执行对象字面量</li><li>立即调用函数表达式</li></ol><h2 id="控制流程语句和块" tabindex="-1"><a class="header-anchor" href="#控制流程语句和块"><span>控制流程语句和块</span></a></h2><h2 id="使用分号的规则" tabindex="-1"><a class="header-anchor" href="#使用分号的规则"><span>使用分号的规则</span></a></h2><ul><li>一个结尾带有块的语句后面没有分号</li><li>空语句</li><li>自动插值分号</li></ul><h2 id="合法标识符" tabindex="-1"><a class="header-anchor" href="#合法标识符"><span>合法标识符</span></a></h2><h2 id="调用数值字面量上的方法" tabindex="-1"><a class="header-anchor" href="#调用数值字面量上的方法"><span>调用数值字面量上的方法</span></a></h2><h2 id="严格模式" tabindex="-1"><a class="header-anchor" href="#严格模式"><span>严格模式</span></a></h2><ul><li>切换到严格模式</li><li>严格模式：推荐以及说明</li><li>在严格模式中变量必须被定义</li><li>在严格模式中的函数</li><li>在严格模式中设置和删除不可变属性失败会有提示</li><li>在严格模式中不合格的标识符不能被删除</li><li>在严格模式中eval()是清洁工</li><li>在严格模式中被阻止的特性</li></ul>`,18)]))}const p=l(n,[["render",t],["__file","7javascript的语法.html.vue"]]),h=JSON.parse('{"path":"/books/javascript/%E8%AF%9D%E8%AF%B4javascript/3%E6%B7%B1%E5%85%A5javascript/7javascript%E7%9A%84%E8%AF%AD%E6%B3%95.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"语法概述","slug":"语法概述","link":"#语法概述","children":[]},{"level":2,"title":"注释","slug":"注释","link":"#注释","children":[]},{"level":2,"title":"表达式vs语句","slug":"表达式vs语句","link":"#表达式vs语句","children":[]},{"level":2,"title":"控制流程语句和块","slug":"控制流程语句和块","link":"#控制流程语句和块","children":[]},{"level":2,"title":"使用分号的规则","slug":"使用分号的规则","link":"#使用分号的规则","children":[]},{"level":2,"title":"合法标识符","slug":"合法标识符","link":"#合法标识符","children":[]},{"level":2,"title":"调用数值字面量上的方法","slug":"调用数值字面量上的方法","link":"#调用数值字面量上的方法","children":[]},{"level":2,"title":"严格模式","slug":"严格模式","link":"#严格模式","children":[]}],"git":{"updatedTime":1735558340000,"contributors":[{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":4,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/Boswell"},{"name":"Boswell","username":"Boswell","email":"aiyoudqrjmz@163.com","commits":2,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"mingzhuang.ji","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/mingzhuang.ji"}]},"filePathRelative":"books/javascript/话说javascript/3深入javascript/7javascript的语法.md"}');export{p as comp,h as data};
