import{_ as i,c as e,e as o,o as c}from"./app-XEG1kVcG.js";const a={};function u(t,l){return c(),e("div",null,l[0]||(l[0]=[o('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><ul><li><p>js中, 很多运算符具有二义性, 一方面使得js更加灵活, 一方面使得js代码更显得难理解</p></li><li><p>根据语法规则，优先级算法，默认的系统机制，处理</p></li><li><p>为的是将语法更清晰的表达，因为运算符的二义性带来的是不清晰的语法；</p></li></ul><h2 id="二义性运算符的分类" tabindex="-1"><a class="header-anchor" href="#二义性运算符的分类"><span>二义性运算符的分类</span></a></h2><ul><li><p><code>,</code> :</p><ul><li>语法分隔符：参数分割符, 对象, 数组声明分隔符;</li><li>连续运算符：在<code>（）</code>强制运算符中作为运算符；</li><li><code>ctx = &#39;a = 1&#39;; eval(&#39;var &#39;+ ctx)</code>在语法解析期间可能会出现错误； 所以改为<code>eval(&#39;var &#39;+ name); eval(ctx)</code>;这里发生了语义上的根本改变， 从<code>表达式执行</code>变成了<code>变量语句声明</code>；</li></ul></li><li><p><code>+</code> :</p><ul><li>作用 <ul><li>字符串连接</li><li>数值取正值的一元运算符</li><li>数值逻辑表达式的求和运算 <ul><li>矛盾点在于处理将 <code>依赖数据类型</code> ;</li><li>脚本引擎不能根据运算符判断操作数的数据类型</li></ul></li></ul></li></ul></li><li><p><code>()</code> :</p><ul><li>作用： <ul><li>作为语句中的词法元素； <ul><li>参数列表</li></ul></li><li>传值参数表； <ul><li>new 构造函数参数</li></ul></li><li>子句中用来作为限定表达式的词法元素；这时的括号会有将表达式结果转为bool值的副作用； <ul><li>if(expression)</li></ul></li><li>用于强制表达式运算 <ul><li>typeof() (&#39;a&#39;,2)</li></ul></li><li>作为函数调用方法运算符 <ul><li>fn()</li></ul></li></ul></li><li>问题 <ul><li>()为运算符，只能处理运算元</li></ul></li></ul></li><li><p><code>:</code> :</p><ul><li>作用 <ul><li>直接量对象的成员声明；</li><li>标签声明；</li><li>switch中声明一个分支；</li><li>运算符的含义，再 <code>?:</code> 三元表达式中；</li></ul></li></ul></li><li><p><code>[]</code> :</p><ul><li>作用： <ul><li>可以用于声明数组；</li><li>可以是存取数组下标的运算符；</li></ul></li><li>用法： <ul><li><code>const arr = [[1][1]]; =》 const arr = [undefined]</code>,这里是没有语法错误的; <ul><li><code>[[1,2][1,2]]</code>: 1.逗号可以被认为是连续运算符； 2.第二个数组被认为是数组下标运算符；</li></ul></li></ul></li></ul></li><li><p><code>{}</code> :</p><ul><li>作用： <code>都是词法符号</code><ul><li>复合语句的符号；</li><li>if(true){name:1},会被优先理解为语句； =》 返回1， 因为语句是从左向右执行的； <ul><li>语句的语法分析，在时序上先于代码执行，所以表达式作为次级元素理解；</li><li>if(true){({name:1})},将会从右向左执行</li></ul></li><li>用于函数直接量声明时；</li><li>结构化异常处理的语法符号； <ul><li>try{}catch(err){}</li><li>复合语句的语法标识符，可以用单行语句来替换，结构化异常处理语法不可以，这是他们的重要区别；</li></ul></li></ul></li></ul></li><li><p><code>;</code> :</p></li></ul>',4)]))}const m=i(a,[["render",u],["__file","2.6运算符的二义性.html.vue"]]),n=JSON.parse('{"path":"/books/javascript/javascript%E8%AF%AD%E8%A8%80%E7%B2%BE%E9%AB%93%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%AE%9E%E8%B7%B5/2javascript%E7%9A%84%E8%AF%AD%E6%B3%95/2.6%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BA%8C%E4%B9%89%E6%80%A7.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"二义性运算符的分类","slug":"二义性运算符的分类","link":"#二义性运算符的分类","children":[]}],"git":{"updatedTime":1735558340000,"contributors":[{"name":"j哥哥","username":"j哥哥","email":"aiyoudqrjmz@163.com","commits":1,"url":"https://github.com/j哥哥"},{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":14,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/Boswell"},{"name":"Boswell","username":"Boswell","email":"aiyoudqrjmz@163.com","commits":2,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"mingzhuang.ji","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/mingzhuang.ji"}]},"filePathRelative":"books/javascript/javascript语言精髓与编程语言实践/2javascript的语法/2.6运算符的二义性.md"}');export{m as comp,n as data};
