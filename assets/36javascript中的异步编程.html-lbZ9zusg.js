import{_ as a,c as n,e,o as t}from"./app-XEG1kVcG.js";const i={};function l(p,s){return t(),n("div",null,s[0]||(s[0]=[e(`<p>1.2</p><ul><li>默认的，js任务在单个进程中是顺序地执行的函数。</li></ul><p>1.4</p><ul><li>Promise是两件事情：</li></ul><ol><li>使回调更容易处理的标准模式。</li><li>构建异步函数的机制。</li></ol><p>3.0 事件轮询</p><p>js默认运行在单进程中。浏览器和nodejs中都是。所谓的事件轮询在进程中顺序的执行任务（代码段）。事件轮询如图所示：</p><p>任务源添加运行任务队列的代码，通过事件队列清除任务队列。</p><p>两个政党访问任务队列：</p><ol><li><p>任务源添加队列任务。其中的一些来源并行的运行js进程。例如，一个任务源关照用户界面事件：如果一个用户点击某个地方并且一个点击监听器被注册，之后，调用被添加到任务队列中的监听器。</p></li><li><p>事件轮询持续地在js进程中运行。每个轮询遍历期间，它会从队列（如果队列是空的，它会等到直到不空）中取出一个任务并且执行它。当调用栈空了，任务就被完成了而且有返回。控制返回到事件轮询，之后，从队列中检索下一个任务并执行它，等等。</p></li></ol><p>下面的js代码于事件轮询近似：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> task <span class="token operator">=</span> taskQueue<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// run task</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)]))}const c=a(i,[["render",l],["__file","36javascript中的异步编程.html.vue"]]),m=JSON.parse('{"path":"/books/javascript/%E7%BB%99%E4%B8%8D%E8%80%90%E7%83%A6%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84javascript/8%E5%BC%82%E6%AD%A5/36javascript%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B.html","title":"","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1735558340000,"contributors":[{"name":"j哥哥","username":"j哥哥","email":"aiyoudqrjmz@163.com","commits":1,"url":"https://github.com/j哥哥"},{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":12,"url":"https://github.com/jmz"},{"name":"jmz","username":"jmz","email":"aiyoudqrjmz@163.com","commits":3,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/Boswell"},{"name":"Boswell","username":"Boswell","email":"aiyoudqrjmz@163.com","commits":2,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"mingzhuang.ji","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/mingzhuang.ji"}]},"filePathRelative":"books/javascript/给不耐烦的程序员的javascript/8异步/36javascript中的异步编程.md"}');export{c as comp,m as data};
