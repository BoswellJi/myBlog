import{_ as s,c as a,e as t,o as p}from"./app-XEG1kVcG.js";const e={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[t(`<p>命令模式目的在于封装方法调用，请求或者操作到一个单独的对象里面，而且给我们参数化以及传递可以根据我们的判断执行的方法调用。另外，它能够让我们从实现它们的对象中解耦调用行为的对象，在交换具体类时提供更大程度的整体灵活性。</p><p>具体类在基于类的编程语言的范畴是最好解释的，而且与抽象类的思想有关。一个抽象类定义一个接口，但是不需要提供所有成员函数的实现。它充当一个基类，其他类都是从基类派生的。实现缺少的更能的派生类叫做具体类。</p><p>命令模式背后的一般思想是提供给我们一个从执行命令的任意事情中分离问题命令的责任，委托这个责任给不同的替换对象。</p><p>在实现方面，简单的命令对象将操作和希望调用的对象绑定在一起。它们一致地包含一个执行操作（例如：run().execute()）。所有相同接口的命令对象，可以容易的作为需要交换，而且这个被认为是这个模式巨大好处之一。</p><p>为了演示模块模式，我们打算创建一个简单的汽车购买服务：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">var</span> carManager <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// request information</span></span>
<span class="line">    <span class="token function-variable function">requestInfo</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">model<span class="token punctuation">,</span> id</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token string">&quot;The information for &quot;</span> <span class="token operator">+</span> model <span class="token operator">+</span> <span class="token string">&quot; with ID &quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot; is foobar&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// purchase the car</span></span>
<span class="line">    <span class="token function-variable function">buyVehicle</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">model<span class="token punctuation">,</span> id</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token string">&quot;You have successfully purchased Item &quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot;, a &quot;</span> <span class="token operator">+</span> model<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// arrange a viewing</span></span>
<span class="line">    <span class="token function-variable function">arrangeViewing</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">model<span class="token punctuation">,</span> id</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token string">&quot;You have successfully booked a viewing of &quot;</span> <span class="token operator">+</span> model <span class="token operator">+</span> <span class="token string">&quot; ( &quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot; ) &quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看看上面的代码，通过直接访问对象来调用我们carManager方法很繁琐。如果我们认为这并没有什么错，我们会被原谅。技术上，它是完整的有效js。但是，某些情况下，这可能是不利的。</p><p>例如，想想一下，如果carManager背后的核心api修改了。这可能需要所有对象直接访问我们应用程序中的这些方法也需要被修改。这个可以看作耦和层，这与尽量松耦合对象的oop方法相悖。相反地，我们可以通过进一步抽象api来解决这个问题。</p><p>现在，让我们扩展我们的carManager，这样命令模式的应用导致下面： 接受任何能够在carManager上执行的命名方法，传递任何被使用的数据，例如，car模型和id.</p><p>这里是我们想要达到的：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">carManager<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span> <span class="token string">&quot;buyVehicle&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ford Escort&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;453543&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>按照这个结构，我们现在应该给carManager.execute方法添加定义，如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">carManager<span class="token punctuation">.</span><span class="token function-variable function">execute</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">name</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> carManager<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> carManager<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> carManager<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，我们最后案例调用看起来，如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">carManager<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span> <span class="token string">&quot;arrangeViewing&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ferrari&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;14523&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">carManager<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span> <span class="token string">&quot;requestInfo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ford Mondeo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;54323&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">carManager<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span> <span class="token string">&quot;requestInfo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ford Escort&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;34232&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">carManager<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span> <span class="token string">&quot;buyVehicle&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ford Escort&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;34232&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15)]))}const l=s(e,[["render",o],["__file","7命令模式.html.vue"]]),u=JSON.parse('{"path":"/books/javascript/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html","title":"","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1735558340000,"contributors":[{"name":"j哥哥","username":"j哥哥","email":"aiyoudqrjmz@163.com","commits":1,"url":"https://github.com/j哥哥"},{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":13,"url":"https://github.com/jmz"},{"name":"jmz","username":"jmz","email":"aiyoudqrjmz@163.com","commits":3,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/Boswell"},{"name":"Boswell","username":"Boswell","email":"aiyoudqrjmz@163.com","commits":2,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"mingzhuang.ji","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/mingzhuang.ji"}]},"filePathRelative":"books/javascript/javascript设计模式/8js设计模式/7命令模式.md"}');export{l as comp,u as data};
