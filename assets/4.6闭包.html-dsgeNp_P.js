import{_ as e,c as i,e as n,o as a}from"./app-XEG1kVcG.js";const s={};function t(c,l){return a(),i("div",null,l[0]||(l[0]=[n(`<h2 id="什么时闭包" tabindex="-1"><a class="header-anchor" href="#什么时闭包"><span>什么时闭包？</span></a></h2><h2 id="什么是函数实例与函数引用" tabindex="-1"><a class="header-anchor" href="#什么是函数实例与函数引用"><span>什么是函数实例与函数引用</span></a></h2><h2 id="在被调用时-每个函数实例至少拥有一个闭包" tabindex="-1"><a class="header-anchor" href="#在被调用时-每个函数实例至少拥有一个闭包"><span>在被调用时，每个函数实例至少拥有一个闭包</span></a></h2><ul><li><p>闭包时对应于运行期的函数实例的；而不是对应函数代码块的；</p></li><li><p>哪些情况下产生实例，就可以清除的知道运行的闭包环境；</p></li><li><p>对象的实例，只持有原型中的方法的一个引用，不会产生闭包；</p></li><li><p>产生函数实例的情况：</p></li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">function A(){</span>
<span class="line">  this.AFn=function(){}</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">function B(){</span>
<span class="line">  &lt;!-- 写法一 --&gt;</span>
<span class="line">  return function(){}</span>
<span class="line"></span>
<span class="line">  &lt;!-- 写法二 --&gt;</span>
<span class="line">  function C(){}</span>
<span class="line">  return C;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>本质是 <code>产生</code> 与 <code>不产生</code> 函数实例，进而形成两种闭包，两种保护数据和提供运行上下文环境的形式；</li></ul><h2 id="函数闭包与调用对象" tabindex="-1"><a class="header-anchor" href="#函数闭包与调用对象"><span>函数闭包与调用对象</span></a></h2><ul><li><p>局部变量是 <code>调用对象</code> 的属性；</p></li><li><p>js执行环境（执行上下文）：</p><ul><li>描述函数作为对象时的外在表现</li><li>包括函数名，参数等</li><li>body指向 <code>调用对象</code></li></ul></li><li><p>调用对象 <code>函数代码体中全部的语法分析结构</code> ：</p><ul><li>结构 <ul><li>内部变量表</li><li>内嵌函数表</li><li>全部代码</li></ul></li><li>局部变量维护规则 <ul><li>函数开始执行（每次），varDecls中所有值被重置为undefined</li><li>函数退出varDecls不被重置，所以能够在函数内保存数据，这种函数式特性；（闭包</li><li>函数内数据的生存周期，取决于函数实例是否存在活动引用；</li></ul></li></ul></li><li><p>对象时存储系统，不是执行系统，主要运算是，成员存取操作；</p></li></ul><h2 id="函数实例拥有多个闭包的情况" tabindex="-1"><a class="header-anchor" href="#函数实例拥有多个闭包的情况"><span>函数实例拥有多个闭包的情况</span></a></h2><h2 id="语句和语句块中的闭包问题" tabindex="-1"><a class="header-anchor" href="#语句和语句块中的闭包问题"><span>语句和语句块中的闭包问题</span></a></h2><h2 id="闭包中的标识符-变量-特性" tabindex="-1"><a class="header-anchor" href="#闭包中的标识符-变量-特性"><span>闭包中的标识符（变量）特性</span></a></h2><h2 id="函数对象的闭包及其效果" tabindex="-1"><a class="header-anchor" href="#函数对象的闭包及其效果"><span>函数对象的闭包及其效果</span></a></h2><h2 id="闭包与可见性" tabindex="-1"><a class="header-anchor" href="#闭包与可见性"><span>闭包与可见性</span></a></h2>`,13)]))}const d=e(s,[["render",t],["__file","4.6闭包.html.vue"]]),p=JSON.parse('{"path":"/books/javascript/javascript%E8%AF%AD%E8%A8%80%E7%B2%BE%E9%AB%93%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%AE%9E%E8%B7%B5/4javascript%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/4.6%E9%97%AD%E5%8C%85.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"什么时闭包？","slug":"什么时闭包","link":"#什么时闭包","children":[]},{"level":2,"title":"什么是函数实例与函数引用","slug":"什么是函数实例与函数引用","link":"#什么是函数实例与函数引用","children":[]},{"level":2,"title":"在被调用时，每个函数实例至少拥有一个闭包","slug":"在被调用时-每个函数实例至少拥有一个闭包","link":"#在被调用时-每个函数实例至少拥有一个闭包","children":[]},{"level":2,"title":"函数闭包与调用对象","slug":"函数闭包与调用对象","link":"#函数闭包与调用对象","children":[]},{"level":2,"title":"函数实例拥有多个闭包的情况","slug":"函数实例拥有多个闭包的情况","link":"#函数实例拥有多个闭包的情况","children":[]},{"level":2,"title":"语句和语句块中的闭包问题","slug":"语句和语句块中的闭包问题","link":"#语句和语句块中的闭包问题","children":[]},{"level":2,"title":"闭包中的标识符（变量）特性","slug":"闭包中的标识符-变量-特性","link":"#闭包中的标识符-变量-特性","children":[]},{"level":2,"title":"函数对象的闭包及其效果","slug":"函数对象的闭包及其效果","link":"#函数对象的闭包及其效果","children":[]},{"level":2,"title":"闭包与可见性","slug":"闭包与可见性","link":"#闭包与可见性","children":[]}],"git":{"updatedTime":1735558340000,"contributors":[{"name":"j哥哥","username":"j哥哥","email":"aiyoudqrjmz@163.com","commits":1,"url":"https://github.com/j哥哥"},{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":10,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/Boswell"},{"name":"Boswell","username":"Boswell","email":"aiyoudqrjmz@163.com","commits":2,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"mingzhuang.ji","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/mingzhuang.ji"}]},"filePathRelative":"books/javascript/javascript语言精髓与编程语言实践/4javascript的函数式语言特性/4.6闭包.md"}');export{d as comp,p as data};
