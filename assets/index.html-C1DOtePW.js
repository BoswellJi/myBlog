import{_ as i,c as e,e as a,o}from"./app-XEG1kVcG.js";const t={};function n(m,l){return o(),e("div",null,l[0]||(l[0]=[a('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><ul><li>Map</li><li>散列使用的数据结构叫做 <code>散列表</code> ；可以快速的插入和取用；</li><li>所有的元素根据该元素对象的 <code>键</code> ，该 <code>键</code> 和字典中的键是类似概念；</li><li>键是用来生成一个 <code>散列数组索引</code> ；</li></ul><h2 id="散列表-哈希表" tabindex="-1"><a class="header-anchor" href="#散列表-哈希表"><span>散列表(哈希表)</span></a></h2><ul><li><p>是指key为哈希值的字典数据结构，不需要手动指定key;</p></li><li><p>组件:</p></li></ul><ol><li>散列生成器</li></ol><ul><li>防止散列重复： - 开链法：实现散列表的底层数组中，每个数组元素又是一个新的数据结构，比如另一个数组，这样就能存储多个键了； - 线性探测法：<code>开放寻址散列</code></li></ul><ol start="2"><li>新增散列</li><li>散列表</li><li>散列函数的选择依赖于键的数据类型</li><li>避免碰撞，首先要确保散列表中用来存储数据的数组其大小是个质数，这和计算散列表值时使用的取余运算有关；</li><li>使用霍纳算法</li></ol><ul><li>优势:</li></ul><ol><li>增删获取快</li></ol><ul><li>劣势:</li></ul><ol><li>遍历慢</li></ol>',11)]))}const c=i(t,[["render",n],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/books/javascript/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95javascript%E6%8F%8F%E8%BF%B0/8%E6%95%A3%E5%88%97/","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"散列表(哈希表)","slug":"散列表-哈希表","link":"#散列表-哈希表","children":[]}],"git":{"updatedTime":1735558340000,"contributors":[{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":4,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/Boswell"},{"name":"Boswell","username":"Boswell","email":"aiyoudqrjmz@163.com","commits":2,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"mingzhuang.ji","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/mingzhuang.ji"}]},"filePathRelative":"books/javascript/数据结构与算法javascript描述/8散列/readme.md"}');export{c as comp,r as data};
