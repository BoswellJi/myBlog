import{_ as e,c as l,e as n,o as a}from"./app-XEG1kVcG.js";const c={};function o(u,i){return a(),l("div",null,i[0]||(i[0]=[n('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>这章是unicode的简洁介绍并且如何在js中处理它。</p><h2 id="unicode历史" tabindex="-1"><a class="header-anchor" href="#unicode历史"><span>unicode历史</span></a></h2><p>unicode被三个人创建于1987年，目的是创建统一字符集，因为同时有许多编码普通文本不兼容的标准：许多8位ascll变种，big five(繁体中文)，GB2312（简体中文），等等。unicode之前，多语言纯文本没有标准存在，但是有允许你组合多编码的富文本系统。</p><p>第一个unicode草案题案在1988年发布。工作一直向前并且工作组一直扩展。unicode联盟在1991.3.1被合并。</p><p>unicode联盟是一个非盈利性的公司致力于开发，维护，推广软件国际化标准以及数据，尤其是unicode标准。</p><p>unicode1.0标准的第一卷在1991.10月被发布，以及1992年发布第二版。</p><h2 id="重要的unicode概念" tabindex="-1"><a class="header-anchor" href="#重要的unicode概念"><span>重要的unicode概念</span></a></h2><p>字符的概念可能看起来很简单，但是他有很多层意义。这就是为什么unicode是一个非常复杂的标准了。下面是重要的基础概念：</p><ul><li>字符和字母（字母：每种语言中组成语言的最小单位）</li></ul><p>有两个术语意思相当接近。字符是数字实体，而字母是书写语言的原子单位（字母表字母，中文字符）。程序员认为的字符，不是用户认为的字母。有时，几个字符被用于代表一个单独的字母。例如，我们能通过结合字符，生成字母。</p><ul><li>字形</li></ul><p>这是具体展示字母的方法。有时，相同的字母展示不同，取决于它的内容或者其他因素。例如，字母f和i能够被作为字形f,i展示，通过连带字形或者不连带字形来连接。</p><ul><li>码点</li></ul><p>unicode通过叫做码点的数字来代表它支持的字符。码点的16进制范围是0X0 到 0XFFFF。</p><ul><li>码单元</li></ul><p>为了存储或者传输码点，我们编码它们作为码单元，带有固定长度的数据块。长度用位来测量，并且通过编码模式来决定，unicode的编码有几种，例如utf-8,utf-16。名字中的数字表明码单元的长度，使用位。如果一个码点太大，无法装入一个代码单元，它必须被分解成多个单元。换句话说，码单元的数字需要代表能变异的单独码点。</p><ul><li>BOM(字节顺序标记byte order mark)</li><li>正规化</li><li>字符属性</li></ul><p>每一个unicode字符被规格指定了几个属性，其中的一些被列在这里：</p><ol><li>Name.</li><li>一般分类。</li><li>Age</li><li>Deprecated</li></ol><h2 id="码点" tabindex="-1"><a class="header-anchor" href="#码点"><span>码点</span></a></h2><h2 id="unicode编码" tabindex="-1"><a class="header-anchor" href="#unicode编码"><span>unicode编码</span></a></h2><h2 id="js源码和unicode" tabindex="-1"><a class="header-anchor" href="#js源码和unicode"><span>js源码和unicode</span></a></h2><ul><li>内部源码</li><li>外部源码</li></ul><h2 id="js字符串和unicode" tabindex="-1"><a class="header-anchor" href="#js字符串和unicode"><span>js字符串和unicode</span></a></h2><ul><li>转义序列</li><li>unicode规范化</li></ul><h2 id="js正则表达式和unicode" tabindex="-1"><a class="header-anchor" href="#js正则表达式和unicode"><span>js正则表达式和unicode</span></a></h2><ul><li>匹配任意码单元和任意码点</li><li>库</li><li>推荐阅读和章节来源</li></ul>',28)]))}const d=e(c,[["render",o],["__file","24unicode和javascript.html.vue"]]),t=JSON.parse('{"path":"/books/javascript/%E8%AF%9D%E8%AF%B4javascript/3%E6%B7%B1%E5%85%A5javascript/24unicode%E5%92%8Cjavascript.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"unicode历史","slug":"unicode历史","link":"#unicode历史","children":[]},{"level":2,"title":"重要的unicode概念","slug":"重要的unicode概念","link":"#重要的unicode概念","children":[]},{"level":2,"title":"码点","slug":"码点","link":"#码点","children":[]},{"level":2,"title":"unicode编码","slug":"unicode编码","link":"#unicode编码","children":[]},{"level":2,"title":"js源码和unicode","slug":"js源码和unicode","link":"#js源码和unicode","children":[]},{"level":2,"title":"js字符串和unicode","slug":"js字符串和unicode","link":"#js字符串和unicode","children":[]},{"level":2,"title":"js正则表达式和unicode","slug":"js正则表达式和unicode","link":"#js正则表达式和unicode","children":[]}],"git":{"updatedTime":1735558340000,"contributors":[{"name":"j哥哥","username":"j哥哥","email":"aiyoudqrjmz@163.com","commits":1,"url":"https://github.com/j哥哥"},{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":13,"url":"https://github.com/jmz"},{"name":"jmz","username":"jmz","email":"aiyoudqrjmz@163.com","commits":3,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/Boswell"},{"name":"Boswell","username":"Boswell","email":"aiyoudqrjmz@163.com","commits":2,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"mingzhuang.ji","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/mingzhuang.ji"}]},"filePathRelative":"books/javascript/话说javascript/3深入javascript/24unicode和javascript.md"}');export{d as comp,t as data};
